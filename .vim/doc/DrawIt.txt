*drawit.txt*	The DrawIt Tool		September 24, 2001

Authors:  Charles E. Campbell, Jr.  <charles.e.campbell.1@gsfc.nasa.gov>
          Sylvain VIART             <molo@multimania.com>

==============================================================================
1. Contents						*drawit-contents*

	DrawIt Manual       : |drawit|
	How to start DrawIt : |drawit-start|
	How to stop DrawIt  : |drawit-stop|
	DrawIt Usage        : |drawit-usage|
	Authors             : Charles E. Campbell, Jr.
	                    : Sylvain VIART

==============================================================================

2. DrawIt Manual					*drawit*

	To Enable:

 /=============+============================================================\
 || Starting & |                                                           ||
 || Stoping    | Explanation                                               ||
 ++------------+-----------------------------------------------------------++
 ||  \di       | start DrawIt                              *drawit-start*  ||
 ||  \ds       | stop  DrawIt                              *drawit-stop*   ||
 ||            |                                                           ||
 ++============+===========================================================++
 || Commands   | Explanation                                               ||
 ++------------+-----------------------------------------------------------++
 ||            | The DrawIt routines use a replace, move, and              ||
 ||            | replace/insert strategy.  The package also lets one insert||
 ||            | spaces, draw arrows by using the following characters or  ||
 ||            | keypad characters:                                        ||
 ||            +-----------------------------------------------------------++
 || <space>    | insert a space in the direction last moved                ||
 || >          | insert a > and move right    (draw -> arrow)              ||
 || <          | insert a < and move left     (draw <- arrow)              ||
 || ^          | insert a ^ and move up       (draw ^  arrow)              ||
 || v          | insert a v and move down     (draw v  arrow)              ||
 || <pgdn>     | replace with a \, move down and right, and insert a \     ||
 || <end>      | replace with a /, move down and left,  and insert a /     ||
 || <pgup>     | replace with a /, move up   and right, and insert a /     ||
 || <home>     | replace with a \, move up   and left,  and insert a \     ||
 ||            |                                                           ||
 ||            +-----------------------------------------------------------++
 ||            | The drawing mode routines use visual-block mode to        ||
 ||            | select endpoints for lines, arrows, and ellipses. Bresen- ||
 ||            | ham and Bresenham-like algorithms are used for this.      ||
 ||            |                                                           ||
 ||            | These routines need a block of spaces, and so the "holer" ||
 ||            | routine must first be used to create such a block.  The   ||
 ||            | holer routine will query the user for the number of lines ||
 ||            | to hold |'textwidth'| spaces.                             ||
 ||            +-----------------------------------------------------------++
 || \a         | draw arrow from corners of visual-block selected region   ||
 || \b         | draw box on visual-block selected region                  ||
 || \e         | draw an ellipse on visual-block selected region           ||
 || \h         | the holer routine (will query user, see above)            ||
 || \l         | draw line from corners of visual-block selected region    ||
 || \s         | spacer: appends spaces up to the textwidth (default: 78)  ||
 ||            |                                                           ||
 ++============+===========================================================++
 || Function and Explanation                                               ||
 ++------------+-----------------------------------------------------------++
 ||  :call SetDrawIt('vertical','horizontal','crossing','\','/','X')       ||
 ||            set drawing characters for motions for moving               ||
 ||  default   motion                                                      ||
 ||  |         up/down,                                                    ||
 ||  -         left/right,                                                 ||
 ||  +         -| crossing,                                                ||
 ||  \         downright,                                                  ||
 ||  /         downleft, and                                               ||
 ||  X         \/ crossing                                                 ||
 ||                                                                        ||
 \==========================================================================/

==============================================================================

3. DrawIt Usage						*drawit-usage*

Typically one puts <drawit.vim> into the .vim/plugin directory
(vimfiles\plugin for MS) where it becomes always available.  It uses a minimal
interface (\di: you can think of it as *D*raw*I*t or *D*rawIt *I*nitialize) to
start it and (\ds: *D*rawIt *S*top) to stop it.  Instead of using "\", you
may specify the leader (see |mapleader|).

Starting DrawIt causes it to set up a number of maps which facilitate drawing.
Just use the arrow keys or the keypad to cruise around your display.  DrawIt
will then leave appropriate lines as you move horizontally, vertically, or
diagonally, and will transparently enlarge your file to accommodate your
drawing as needed.  DrawIt saves both maps and user options and sets them to
its own needs.  You may use h-j-k-l to move about your display and generally
use editing commands as you wish even while in DrawIt mode.

When you are done with DrawIt, use \ds to stop DrawIt mode.  Stopping DrawIt
will restore your usual options and remove the maps DrawIt set up.

The SetDrawIt() function is available for those who wish to change the
characters that DrawIt uses. >

    ex. :call SetDrawIt('*','*','*','*','*','*')
    ex. :call SetDrawIt('-','|','-','\','/','/')
<
The first example shows how to change all the DrawIt drawing characters to
asterisks, and the second shows how to give crossing priority
to - and /.

Needless to say, the bottom spirals were done with DrawIt and some
block editing with Vim: >

   +------------ -----------+ +------------ -----------+ +------------
   |+----------+ +---------+| |+----------+ +---------+| |+----------+
   ||+--------+| |+-------+|| ||+--------+| |+-------+|| ||+--------+|
   |||-------+|| ||+------||| |||-------+|| ||+------||| |||-------+||
   ||+-------+|| ||+------+|| ||+-------+|| ||+------+|| ||+-------+||
   |+---------+| |+--------+| |+---------+| |+--------+| |+---------+|
   +-----------+ +----------+ +-----------+ +----------+ +-----------+

The DrawIt package has been merged with Sylvain Viart's drawing package.
One must have a block of spaces for these routines which the "holer"
routine (\h) will help create.  The holer routine will query the user
for the number of lines s/he wishes to have, and will fill those lines
with spaces out to the |'textwidth'| (or 78 spaces if that option hasn't
been set).

The Sylvain Viart functions and the ellipse drawing function depend
upon using visual block mode.  Typical use: >

	Example: * \h
                   DrawIt asks: how many lines under the cursor? 10
                   DrawIt then appends 10 lines filled with blanks
                   out to textwidth (if defined) or 78 columns.
                 * ctrl-v (move) \b
                   DrawIt then draws a box
<
One first creates a number of blank-filled lines; the \h map (the "holer") is
useful for this.  Select the first endpoint with ctrl-v and then move to the
other endpoint.  One may then select \a for arrows, \b for boxes, \e for ellipses,
or \l for lines.
>
        Examples:

        __                _         ***************
          \_            _/      ****               ****
            \_        _/      **      --------->       **
              \_    _/          ****               ****
                \__/   <-------     ***************

>
    Charles E. Campbell, Jr.	<charles.e.campbell.1@gsfc.nasa.gov>
    Sylvain VIART		<molo@multimania.com>
vim:tw=78:ts=8:ft=help
